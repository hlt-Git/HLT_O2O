<?xml version="1.0" encoding="UTF-8" ?>

 <!--scan：true时，当日志文件发生改变，将会被重新加载-->
 <!--debug：false时，不打印logback内部的日志信息-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 定义参数变量 -->
    <!-- 设置记录四个级别的日志信息 debug < info < warn < error-->
    <property name="log.level" value="debug"/>
    <!-- 设置日志文件保留的时间 -->
    <property name="log.maxHistory" value="30"/>
    <!-- 设置日志文件保存的位置 -->
    <property name="log.filePath" value="${catalina.base}/logs/webapps"/>
    <!-- 设置日志展示的格式、标识程序属于哪个线程执行、什么级别、相关的日志信息、%n是换行符 -->
    <property name="log.pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thead] %-5level %logger{50} - %msg%n"/>

    <!-- 控制台设置 -->
    <appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
    </appender>

    <!-- DEBUG -->
    <appender name="debugAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
       <!-- 文件路径 -->
        <file>${log.filePath}/debug.log</file>
        <!-- 滚动策略：基于时间-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件名称 -->
            <fileNamePattern>${log.filePath}/debug/debug.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <!-- 文件最大保存历史数量 -->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder>
            <!-- 将日志信息转化为字符串，以log.pattern的格式输出到文件里 -->
            <pattern>${log.pattern}</pattern>
        </encoder>
        <!-- 过滤掉不是DEBUG的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>           //如果是DEBUG级别的日志信息，则记录
            <onMismatch>DENY</onMismatch>       //如果不是DEBUG级别的则过滤掉
        </filter>
    </appender>

    <!-- INFO -->
    <appender name="infoAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 文件路径 -->
        <file>${log.filePath}/info.log</file>
        <!-- 滚动策略：基于时间-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件名称 -->
            <fileNamePattern>${log.filePath}/info/info.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <!-- 文件最大保存历史数量 -->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder>
            <!-- 将日志信息转化为字符串，以log.pattern的格式输出到文件里 -->
            <pattern>${log.pattern}</pattern>
        </encoder>
        <!-- 过滤掉不是DEBUG的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>           //如果是INFO级别的日志信息，则记录
            <onMismatch>DENY</onMismatch>       //如果不是INFO级别的则过滤掉
        </filter>
    </appender>

    <!-- ERROR -->
    <appender name="errorAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 文件路径 -->
        <file>${log.filePath}/error.log</file>
        <!-- 滚动策略：基于时间-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件名称 -->
            <fileNamePattern>${log.filePath}/error/error.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <!-- 文件最大保存历史数量 -->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder>
            <!-- 将日志信息转化为字符串，以log.pattern的格式输出到文件里 -->
            <pattern>${log.pattern}</pattern>
        </encoder>
        <!-- 过滤掉不是DEBUG的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>           //如果是ERROR级别的日志信息，则记录
            <onMismatch>DENY</onMismatch>       //如果不是ERROR级别的则过滤掉
        </filter>
    </appender>

    <!-- 存放日志对象，同时设置logback关注哪个package下的信息，哪个level以上的日志信息 -->
    <logger name="com.hlt" level="${log.level}" additivity="true">
        <!-- additivity="true"会将父类root里的appender-ref属性也加在logger里，其余不变 -->
        <appender-ref ref="debugAppender"/>
        <appender-ref ref="infoAppender"/>
        <appender-ref ref="errorAppender"/>
    </logger>
    <!-- 父级logger，如果上面没有找到对应的level，则继承root下的level，仅输出info级别以上的信息 -->
    <root level="info">
        <appender-ref ref="consoleAppender"/>
    </root>

</configuration>